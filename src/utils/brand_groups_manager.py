"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –±—Ä–µ–Ω–¥–æ–≤
"""
import logging
from pathlib import Path

from ..normalizer.brand_groups import BrandGroupMapper
from ..config import BRAND_GROUPS_PATH

logger = logging.getLogger(__name__)


class BrandGroupsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –±—Ä–µ–Ω–¥–æ–≤
    """
    
    def __init__(self):
        self.mapper = BrandGroupMapper(BRAND_GROUPS_PATH)
    
    def reload_groups(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø –±—Ä–µ–Ω–¥–æ–≤
        """
        try:
            self.mapper.reload_groups()
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –±—Ä–µ–Ω–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –±—Ä–µ–Ω–¥–æ–≤: {e}")
    
    def test_mapping(self, brand: str) -> None:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        
        Args:
            brand: –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            if not self.mapper.synonym_to_canonical:
                self.mapper.load_groups()
            
            result = self.mapper.map_brand(brand)
            if result != brand.upper():
                print(f"üîÑ {brand} -> {result}")
            else:
                print(f"‚úã {brand} –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def show_info(self) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
        """
        try:
            if not self.mapper.brand_groups:
                self.mapper.load_groups()
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø –±—Ä–µ–Ω–¥–æ–≤: {len(self.mapper.brand_groups)}")
            print(f"üìä –í—Å–µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {len(self.mapper.synonym_to_canonical)}")
            
            print("\nüè∑Ô∏è  –ì—Ä—É–ø–ø—ã –±—Ä–µ–Ω–¥–æ–≤:")
            for canonical, synonyms in self.mapper.brand_groups.items():
                print(f"  {canonical}: {synonyms}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    import sys
    
    manager = BrandGroupsManager()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python -m src.utils.brand_groups_manager reload")
        print("  python -m src.utils.brand_groups_manager test LYNX")
        print("  python -m src.utils.brand_groups_manager info")
        return
    
    command = sys.argv[1].lower()
    
    if command == "reload":
        manager.reload_groups()
    elif command == "test" and len(sys.argv) > 2:
        brand = sys.argv[2]
        manager.test_mapping(brand)
    elif command == "info":
        manager.show_info()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


if __name__ == "__main__":
    main()